# Base ngnix web server
nginx:
  enabled: true
  chart: "bitnami/nginx"
  service:
    type: ClusterIP
  podSecurityContext:
    enabled: false
  containerSecurityContext:
    enabled: false
  networkPolicy:
    enabled: false
  ingress:
    enabled: true
    annotations:
      aviinfrasetting.ako.vmware.com/name: "dataclass-medium"
    hostname: nginx-e56h79-prod.apps.emerald.devops.gov.bc.ca
  version: "15.11.0"
  commonAnnotations:
    datree.skip/CUSTOM_WORKLOAD_INCORRECT_NETWORK_POLICIES: irrelevant for deployments, skipping.
    datree.skip/CUSTOM_REPLICA_COUNT_PROD: skip for default helm.
  image:
    pullPolicy: Always
  podLabels:
    environment: prod
    env: prod
    owner: "e56h79-team"
    project: "e56h79-project"
    DataClass: "Medium"
  commonLabels:
    environment: prod
    env: prod
    owner: "e56h79-team"
    project: "e56h79-project"
    DataClass: "Medium"
    app.kubernetes.io/part-of: "e56h79-project"
  replicaCount: 1
  resources:
    limits:
      cpu: 50m
      memory: 256Mi
    requests:
      memory: 100Mi
      cpu: 20m

# Normal Postgres DB instance
postgresql:
  enabled: false
  image:
    pullPolicy: Always
  commonLabels:
    environment: prod
    env: prod
    owner: "e56h79-team"
    project: "e56h79-project"
    DataClass: "Medium"
  primary:
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
    networkPolicy:
      enabled: false
    labels:
      environment: prod
      env: prod
      owner: "e56h79-team"
      project: "e56h79-project"
      DataClass: "Medium"
    podLabels:
      environment: prod
      env: prod
      owner: "e56h79-team"
      project: "e56h79-project"
      DataClass: "Medium"
    resources:
      limits:
        cpu: 200m
        memory: 1Gi
      requests:
        memory: 256Mi
        cpu: 100m

#  this will create postgres database with HA and 3 nodes. set to 3 in prod
postgresql-ha:
  enabled: true
  backup:
    enabled: true
    image:
      pullPolicy: Always
    cronjob:
      containerSecurityContext:
        enabled: false
      labels:
        job: postgres-job
      podSecurityContext:
        enabled: false
      schedule: "*/5 * * * *"
      resources:
        limits:
          cpu: 10m
          memory: 256Mi
        requests:
          memory: 100Mi
          cpu: 2m
      storage:
        accessModes: ["ReadWriteMany"]
        size: 256Mi

  postgresql:
    image:
      pullPolicy: Always
    debug: true
    password: hb0i97olKO
    initdbScripts:
      my_init_script.sh: |
        #!/bin/sh
        echo "Do something."
      00_init_extensions.sh: |
        echo "Hi, I'm a testing script added by @stanley"
      01_init_table.sql: |
        CREATE TABLE IF NOT EXISTS public.test(
        id BIGSERIAL PRIMARY KEY NOT NULL,
        name character varying(255)
        );

        -- Create Author table
         CREATE TABLE IF NOT EXISTS public.Author (
            AuthorID SERIAL PRIMARY KEY,
            Name VARCHAR(100),
            BirthDate DATE,
            Country VARCHAR(100),
            Email VARCHAR(100) -- Added Email column
        );

        -- Insert sample data into Author table
        INSERT INTO public.Author (Name, BirthDate, Country, Email) VALUES
        ('Stanley Okeke', '1775-12-16', 'Canada', 'stanley.okeke@gov.bc.ca'),
        ('Charles Dickens', '1812-02-07', 'United Kingdom', 'charles@example.com'),
        ('Leo Tolstoy', '1828-09-09', 'Russia', 'leo@example.com'),
        ('Mark Twain', '1835-11-30', 'United States', 'mark@example.com'),
        ('Emily Dickinson', '1830-12-10', 'United States', 'emily@example.com');
    replicaCount: 2
    networkPolicy:
      extraIngress:
        - from:
            - podSelector:
                matchLabels:
                  job: postgres-job
        - from:
            - podSelector:
                matchLabels:
                  app.kubernetes.io/name: webapi-core
    podSecurityContext:
      enabled: false
    persistence:
      size: 256Mi
    containerSecurityContext:
      enabled: false
    resources:
      limits:
        cpu: 50m
        memory: 256Mi
      requests:
        memory: 100Mi
        cpu: 20m

  pgdumpall:
    podSecurityContext:
      enabled: false
    persistence:
      size: 256Mi
    containerSecurityContext:
      enabled: false
    resources:
      limits:
        cpu: 50m
        memory: 256Mi
      requests:
        memory: 100Mi
        cpu: 20m

  pgpool:
    containerSecurityContext:
      enabled: false
    image:
      pullPolicy: Always

  commonLabels:
    environment: prod
    env: prod
    owner: "e56h79-team"
    project: "e56h79-project"
    DataClass: "Medium"
    app.kubernetes.io/part-of: "e56h79-project"

telnet:
  enabled: true
  goldService: "sso-e27db1-dev.apps.gold.devops.gov.bc.ca" # tetsing connectivity from emerald to a service GOLD using telnet
  goldPort: 80
  diamSSO: common-sso.justice.gov.bc.ca # testing outbound to DIAM Common-SSO
  diamPort: 80
  diamEgressIP: 142.34.208.118/32 # PROD DIAM IP
  justinEgressIP: 142.34.47.201/32 # JUSTIN PROD IP
  publicService: "https://docker.io" # testing connectivity from emerald to internet via web proxy using curl
  gitHubUrl: "https://github.com/bcgov/JAG-GITOPS-TEMPLATE.git" # test connectivity outbound to github via git clone
  commonLabels:
    environment: prod
    env: prod
    owner: "e56h79-team"
    project: "e56h79-project"
    DataClass: "Medium"
    app.kubernetes.io/part-of: "e56h79-project"
  podAnnotations:
    datree.skip/CUSTOM_REPLICA_COUNT_PROD: skip for default helm.

react-baseapp:
  enabled: true
  environment: prod
  env: production
  owner: "e56h79-team"
  project: "e56h79-project"
  part: "e56h79-project"
  keycloak:
    authUrl: https://sso-e27db1-dev.apps.gold.devops.gov.bc.ca/auth
    realm: ISB
    clientId: react-baseapp
  apiUrl: "e56h79-app-webapi-core:8080"
  podLabels:
    DataClass: "Medium"
  podAnnotations:
    datree.skip/CUSTOM_REPLICA_COUNT_PROD: skip for default helm.
  route:
    host: react-baseapp-e56h79-prod.apps.emerald.devops.gov.bc.ca
    annotations:
      aviinfrasetting.ako.vmware.com/name: "dataclass-medium"

webapi-core:
  enabled: true
  environment: prod
  app_name: "e56h79-app"
  env: production
  owner: "e56h79-team"
  project: "e56h79-project"
  part: "e56h79-project"
  keycloak:
    realmUrl: https://sso-e27db1-dev.apps.gold.devops.gov.bc.ca/auth/realms/ISB
    adminClientId: WEB-API
    ClientId: WEB-API
  database:
    connectionString: "Host=gitops-postgresql-ha-postgresql;Port=5432;Database=postgres;Username=postgres;Password=hb0i97olKO"
  podLabels:
    DataClass: "Medium"
  podAnnotations:
    datree.skip/CUSTOM_REPLICA_COUNT_PROD: skip for default helm.
